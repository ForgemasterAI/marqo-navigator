apiVersion: v1
kind: Service
metadata:
  name: vespa-content
  namespace: {{ include "marqo.namespace" . }}
  labels:
    app: vespa-feed-server
spec:
  clusterIP: None  # This makes it a headless service
  selector:
    app: vespa-content-server
  ports:
  - name: container
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: config
    port: 19071
    targetPort: 19071
    protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: vespa-content-public
  namespace: {{ include "marqo.namespace" . }}
  labels:
    app: vespa-content-server
spec:
  selector:
    app: vespa-content-server
  ports:
  - name: container
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: config
    port: 19071
    targetPort: 19071
    protocol: TCP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vespa-content-server
  namespace: {{ include "marqo.namespace" . }}
  labels:
    app: vespa-content-server
spec:
  replicas: {{ .Values.vespaContentServer.replicas }}
  updateStrategy:
    type: RollingUpdate
  serviceName: vespa-content
  selector:
    matchLabels:
      app: vespa-content-server
  template:
    metadata:
      labels:
        app: vespa-content-server
    spec:
      initContainers:
      - name: wait-for-app-deployment
        image: busybox
        command: ['sh', '-c', '
          echo "Waiting for Vespa application deployment to complete...";
          for i in $(seq 1 30); do
            if wget -q -O - http://vespa-configserver-0.vespa-internal.{{ include "marqo.namespace" . }}.svc.cluster.local:19071/ApplicationStatus | grep -q application; then
              echo "Application deployed successfully!";
              exit 0;
            fi;
            echo "Waiting for application deployment... ($i/30)";
            sleep 10;
          done;
          echo "Timed out waiting for application deployment, but continuing anyway";
        ']
      - name: chown-var
        securityContext:
          runAsUser: 0
        image: busybox
        command: ["sh", "-c", "chown -R 1000 /opt/vespa/var"]
        volumeMounts:
          - name: vespa-var
            mountPath: /opt/vespa/var
      - name: chown-logs
        securityContext:
          runAsUser: 0
        image: busybox
        command: ["sh", "-c", "chown -R 1000 /opt/vespa/logs"]
        volumeMounts:
          - name: vespa-logs
            mountPath: /opt/vespa/logs
      - name: init-sysctl
        image: busybox
        imagePullPolicy: Always
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        securityContext:
          privileged: true
      - name: workspace-permissions
        securityContext:
          runAsUser: 0
        image: busybox
        command: ["sh", "-c", "chown -R 1000 /workspace"]
        volumeMounts:
          - name: vespa-workspace
            mountPath: /workspace
      containers:
      - name: vespa-content-server
        image: {{ .Values.vespaContentServer.image }}
        args: ["services"]
        imagePullPolicy: Always
        env:
        - name: VESPA_CONFIGSERVERS
          value: vespa-configserver-0.vespa-internal.{{ include "marqo.namespace" . }}.svc.cluster.local,vespa-configserver-1.vespa-internal.{{ include "marqo.namespace" . }}.svc.cluster.local,vespa-configserver-2.vespa-internal.{{ include "marqo.namespace" . }}.svc.cluster.local
        securityContext:
          runAsUser: 1000
        ports:
        - containerPort: 8080
          protocol: TCP
        - containerPort: 19070
          protocol: TCP
        - containerPort: 19071
        volumeMounts:
        - name: vespa-var
          mountPath: /opt/vespa/var
        - name: vespa-logs
          mountPath: /opt/vespa/logs
        - name: vespa-workspace
          mountPath: /workspace
        resources:
          requests:
            memory: {{ .Values.vespaContentServer.resources.requests.memory }}
            cpu: {{ .Values.vespaContentServer.resources.requests.cpu }}
          limits:
            memory: {{ .Values.vespaContentServer.resources.limits.memory }}
            cpu: {{ .Values.vespaContentServer.resources.limits.cpu }}
  volumeClaimTemplates:
  - metadata:
      name: vespa-var
      namespace: {{ include "marqo.namespace" . }}
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 36Gi
  - metadata:
      name: vespa-logs
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
  - metadata:
      name: vespa-workspace
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: vespa-content-server-pdb
  namespace: {{ include "marqo.namespace" . }}
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: vespa-content-server
