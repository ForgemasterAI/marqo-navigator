apiVersion: v1
kind: Service
metadata:
  name: marqo
  namespace: {{ .Values.namespace }}
  labels:
    app: marqo
  annotations:
    app.forgemaster.ai/env: production
spec:
  selector:
    app: marqo
  ports:
  - protocol: TCP
    port: 8882
    targetPort: 8882
    name: http
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: marqo
  namespace: {{ .Values.namespace }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "10"  # Higher number than vespa-app-deployment (-5) and marqo-app-deployer (5)
spec:
  replicas: {{ .Values.marqo.replicas }}
  selector:
    matchLabels:
      app: marqo
  template:
    metadata:
      labels:
        app: marqo
    spec:
      initContainers:
      - name: wait-for-vespa-services
        image: curlimages/curl:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "Waiting for essential Vespa services to be ready..."
          
          # Define service endpoints
          CONFIG_SERVER="vespa-configserver-0.vespa-internal.{{ .Values.namespace }}.svc.cluster.local:19071"
          CONTENT_SERVER="vespa-content-server-1.vespa-content.{{ .Values.namespace }}.svc.cluster.local:19071"
          
          # Define retry parameters
          MAX_RETRIES=30
          RETRY_INTERVAL=10
          
          # Check config server health
          echo "Checking config server health..."
          for i in $(seq 1 $MAX_RETRIES); do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://$CONFIG_SERVER/state/v1/health)
            if [ "$HTTP_CODE" = "200" ]; then
              echo "✓ Config server is healthy"
              CONFIG_HEALTHY="true"
              break
            fi
            echo "Waiting for config server... ($i/$MAX_RETRIES)"
            sleep $RETRY_INTERVAL
          done
          
          if [ "$CONFIG_HEALTHY" != "true" ]; then
            echo "WARNING: Config server health check timed out, but continuing..."
          fi
          
          # Check content server health (using -m for timeout)
          echo "Checking content server health..."
          for i in $(seq 1 $MAX_RETRIES); do
            if curl -s -m 5 http://$CONTENT_SERVER/state/v1/health | grep -q "up"; then
              echo "✓ Content server is healthy"
              CONTENT_HEALTHY="true"
              break
            fi
            echo "Waiting for content server... ($i/$MAX_RETRIES)"
            sleep $RETRY_INTERVAL
          done
          
          if [ "$CONTENT_HEALTHY" != "true" ]; then
            echo "WARNING: Content server health check timed out, but continuing..."
          fi
          
          # Verify application is deployed with simplified check
          echo "Verifying Vespa application deployment..."
          for i in $(seq 1 15); do
            if curl -s -m 5 http://$CONFIG_SERVER/ApplicationStatus | grep -q "active"; then
              echo "✓ Vespa application is deployed!"
              APP_READY="true"
              break
            fi
            echo "Waiting for application deployment... ($i/15)"
            sleep $RETRY_INTERVAL
          done
          
          if [ "$APP_READY" != "true" ]; then
            echo "WARNING: Application deployment check timed out, but continuing..."
          fi
          
          echo "Proceeding with Marqo startup..."
      containers:
      - name: marqo
        image: {{ .Values.marqo.image }}
        ports:
        - containerPort: 8882
        env:
        - name: MARQO_INFERENCE_CACHE_SIZE
          value: "20"
        - name: MARQO_MAX_RETRIEVABLE_DOCS
          value: "100000"
        - name: MARQO_MAX_SEARCH_LIMIT
          value: "100000"
        - name: MARQO_ENABLE_THROTTLING
          value: "true"
        - name: LOG_LEVEL
          value: "warning"
        - name: VESPA_CONFIG_URL
          value: "http://vespa-configserver-0.vespa-internal.{{ .Values.namespace }}.svc.cluster.local:19071"
        - name: VESPA_QUERY_URL
          value: "http://vespa-content-server-1.vespa-content.{{ .Values.namespace }}.svc.cluster.local:8080"
        - name: VESPA_DOCUMENT_URL
          value: "http://vespa-content-server-1.vespa-content.{{ .Values.namespace }}.svc.cluster.local:8080"
        - name: ZOOKEEPER_HOSTS
          value: "vespa-configserver-0.vespa-internal.{{ .Values.namespace }}.svc.cluster.local:2181,vespa-configserver-1.vespa-internal.{{ .Values.namespace }}.svc.cluster.local:2181,vespa-configserver-2.vespa-internal.{{ .Values.namespace }}.svc.cluster.local:2181"
        resources:
          requests:
            memory: {{ .Values.marqo.resources.requests.memory }}
            cpu: {{ .Values.marqo.resources.requests.cpu }}
          limits:
            memory: {{ .Values.marqo.resources.limits.memory }}
            cpu: {{ .Values.marqo.resources.limits.cpu }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: marqo-pvc
  namespace: {{ .Values.namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
