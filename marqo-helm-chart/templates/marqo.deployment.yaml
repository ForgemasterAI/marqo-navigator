apiVersion: v1
kind: Service
metadata:
  name: marqo
  namespace: {{ include "marqo.namespace" . }}
  labels:
    app: marqo
  annotations:
    app.forgemaster.ai/env: production
spec:
  selector:
    app: marqo
  ports:
  - protocol: TCP
    port: 8882
    targetPort: 8882
    name: http
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: marqo
  namespace: {{ include "marqo.namespace" . }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "20"  # Higher number than vespa-app-deployment (10)
spec:
  replicas: {{ .Values.marqo.replicas }}
  selector:
    matchLabels:
      app: marqo
  template:
    metadata:
      labels:
        app: marqo
    spec:
     initContainers:
      - name: wait-for-vespa-app-deployment
        image: alpine:latest
        command: ["/bin/sh", "-c"]
        args:
        - |
          echo "Waiting for Vespa content servers to be ready and responding..."
          
          # Install required tools
          apk add --no-cache curl bind-tools
          
          # Define variables for shorter references
          NAMESPACE="{{ include "marqo.namespace" . }}"
          NUM_CONTENT_SERVERS={{ .Values.vespaContentServer.replicas }}
          
          # Initial delay to ensure servers have started
          sleep 10
          
          for i in $(seq 1 60); do
            echo "Content server health check attempt $i/60..."
            SERVER_READY=false
            
            # Try multiple content servers for redundancy
            for cs_id in $(seq 0 $(( NUM_CONTENT_SERVERS - 1 ))); do
              CONTENT_SERVER="vespa-content-server-${cs_id}.vespa-content.$NAMESPACE.svc.cluster.local"
              echo "Checking content server $cs_id: $CONTENT_SERVER"
              
              # Verify DNS resolution first
              if ! nslookup $CONTENT_SERVER >/dev/null 2>&1; then
                echo "  ✗ DNS resolution failed for $CONTENT_SERVER - server may not exist yet"
                continue
              fi
              
              # Check if server responds with HTTP 200 on port 8080
              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 5 --max-time 10 "http://$CONTENT_SERVER:8080/ApplicationStatus")
              echo "  HTTP response code: $HTTP_CODE"
              
              if [ "$HTTP_CODE" = "200" ]; then
                echo "  ✓ Content server $cs_id is ready and responding with HTTP 200!"
                SERVER_READY=true
                break
              else
                echo "  ✗ Content server $cs_id returned HTTP $HTTP_CODE (not 200)"
              fi
            done
            
            if [ "$SERVER_READY" = "true" ]; then
              echo "✅ At least one content server is ready and responding with HTTP 200! Continuing..."
              exit 0
            fi
            
            echo "No content servers are ready yet. Waiting 10 seconds before next attempt..."
            sleep 10
          done
          
          echo "WARNING: Timed out waiting for content servers to respond with HTTP 200, but continuing anyway..."
     containers:
      - name: marqo
        image: {{ .Values.marqo.image }}
        ports:
        - containerPort: 8882
        env:
        - name: MARQO_INFERENCE_CACHE_SIZE
          value: "20"
        - name: MARQO_MAX_RETRIEVABLE_DOCS
          value: "100000"
        - name: MARQO_MAX_SEARCH_LIMIT
          value: "100000"
        - name: MARQO_ENABLE_THROTTLING
          value: "true"
        - name: LOG_LEVEL
          value: "debug"  # Increase log level to debug connection issues
        - name: VESPA_CONFIG_URL
          value: "http://vespa-configserver-0.vespa-internal.{{ include "marqo.namespace" . }}.svc.cluster.local:19071"
        - name: VESPA_QUERY_URL
          value: "http://vespa-content-server-0.vespa-content.{{ include "marqo.namespace" . }}.svc.cluster.local:8080"
        - name: VESPA_DOCUMENT_URL
          value: "http://vespa-content-server-0.vespa-content.{{ include "marqo.namespace" . }}.svc.cluster.local:8080"
        - name: VESPA_SCHEMA_URL
          value: "http://vespa-content-server-0.vespa-content.{{ include "marqo.namespace" . }}.svc.cluster.local:8080"
        - name: ZOOKEEPER_HOSTS
          value: "vespa-configserver-0.vespa-internal.{{ include "marqo.namespace" . }}.svc.cluster.local:2181,vespa-configserver-1.vespa-internal.{{ include "marqo.namespace" . }}.svc.cluster.local:2181,vespa-configserver-2.vespa-internal.{{ include "marqo.namespace" . }}.svc.cluster.local:2181"
        readinessProbe:
          httpGet:
            path: /ready
            port: 8882
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 10
        resources:
          requests:
            memory: {{ .Values.marqo.resources.requests.memory }}
            cpu: {{ .Values.marqo.resources.requests.cpu }}
          limits:
            memory: {{ .Values.marqo.resources.limits.memory }}
            cpu: {{ .Values.marqo.resources.limits.cpu }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: marqo-pvc
  namespace: {{ include "marqo.namespace" . }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
