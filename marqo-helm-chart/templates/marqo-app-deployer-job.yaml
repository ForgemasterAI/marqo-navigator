apiVersion: batch/v1
kind: Job
metadata:
  name: marqo-app-deployer
  namespace: {{ include "marqo.namespace" . }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
    "helm.sh/hook-timeout": "15m" # Increase the timeout to 15 minutes
spec:
  backoffLimit: 5
  template:
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: wait-for-vespa-init
        image: busybox
        command: ['sh', '-c', '
          echo "Waiting for all infrastructure to be ready...";
          echo "Sleeping for 30 seconds to allow Vespa initialization...";
          sleep 30;
          
          # Define variables for shorter references
          NAMESPACE="{{ include "marqo.namespace" . }}"
          CONFIG0="vespa-configserver-0.vespa-internal.$NAMESPACE.svc.cluster.local:19071"
          CONFIG1="vespa-configserver-1.vespa-internal.$NAMESPACE.svc.cluster.local:19071" 
          CONFIG2="vespa-configserver-2.vespa-internal.$NAMESPACE.svc.cluster.local:19071"
          
          echo "Waiting for Vespa config servers to be ready...";
          for i in $(seq 1 20); do
            echo "Checking config servers (attempt $i/20)";
            CONFIG0_OK=false
            CONFIG1_OK=false
            CONFIG2_OK=false
            
            # Check each server with a timeout to prevent hanging
            if wget -q -T 5 -O - http://$CONFIG0/state/v1/health 2>/dev/null | grep -q "up"; then
              echo "Config server 0 is up"
              CONFIG0_OK=true
            else
              echo "Config server 0 not ready yet"
            fi
            
            if wget -q -T 5 -O - http://$CONFIG1/state/v1/health 2>/dev/null | grep -q "up"; then
              echo "Config server 1 is up"
              CONFIG1_OK=true
            else
              echo "Config server 1 not ready yet"
            fi
            
            if wget -q -T 5 -O - http://$CONFIG2/state/v1/health 2>/dev/null | grep -q "up"; then
              echo "Config server 2 is up"
              CONFIG2_OK=true
            else
              echo "Config server 2 not ready yet"
            fi
            
            # If any two config servers are up, we can continue
            if ($CONFIG0_OK && $CONFIG1_OK) || ($CONFIG0_OK && $CONFIG2_OK) || ($CONFIG1_OK && $CONFIG2_OK); then
              echo "Sufficient config servers are up and running!";
              break;
            fi;
            
            echo "Waiting for more config servers to be ready...";
            sleep 15;
            
            # Last attempt, continue anyway to let the job proceed
            if [ $i -eq 20 ]; then
              echo "WARNING: Not all config servers are ready, but continuing anyway";
            fi
          done;

          # One final quick check before proceeding
          echo "Performing final API check..."
          if wget -q -T 10 -O - http://$CONFIG0/ApplicationStatus 2>/dev/null || 
             wget -q -T 10 -O - http://$CONFIG1/ApplicationStatus 2>/dev/null || 
             wget -q -T 10 -O - http://$CONFIG2/ApplicationStatus 2>/dev/null; then
            echo "At least one config server API is responsive!";
          else
            echo "WARNING: No config server APIs are responding, but continuing anyway";
          fi
          
          echo "Initialization checks completed!";
        ']
      - name: setup-app-directory
        image: busybox
        command: ['sh', '-c', '
          echo "Setting up application directory structure...";
          mkdir -p /app-setup/schemas;
          chmod -R 777 /app-setup;
          echo "Application directory structure created and permissions set.";
        ']
        volumeMounts:
        - name: app-directory
          mountPath: /app-setup
      containers:
      - name: vespa-deployer
        image: {{ .Values.vespaContentServer.image }}
        command:
        - sh
        - -c
        - |
          echo "Checking application directory"
          ls -la /app
          
          echo "Copying configuration files to application directory"
          mkdir -p /app/schemas
          cp /app-config/hosts.xml /app/hosts.xml
          cp /app-config/services.xml /app/services.xml
          cp /app-config/validation-overrides.xml /app/validation-overrides.xml
          cp /app-config/marqo_settings.sd /app/schemas/marqo_settings.sd
          
          echo "Contents of /app directory:"
          find /app -type f | sort
          
          echo "Deploying Vespa application..."
          cd /app
          
          # Set explicit config server
          export VESPA_CONFIGSERVERS="vespa-configserver-0.vespa-internal.{{ include "marqo.namespace" . }}.svc.cluster.local:19071,vespa-configserver-1.vespa-internal.{{ include "marqo.namespace" . }}.svc.cluster.local:19071,vespa-configserver-2.vespa-internal.{{ include "marqo.namespace" . }}.svc.cluster.local:19071"
          
          # Add retry logic for deployment
          for attempt in $(seq 1 5); do
            echo "Deployment attempt $attempt of 5..."
            echo "Running deploy with VESPA_CONFIGSERVERS=$VESPA_CONFIGSERVERS"
            echo "Current directory contents:"
            ls -la
            
            if /opt/vespa/bin/vespa-deploy prepare /app && /opt/vespa/bin/vespa-deploy activate; then
              echo "Application deployment successful!"
              break
            else
              echo "Deployment attempt $attempt failed. Waiting before retry..."
              sleep 30
            fi
            
            # If this is the last attempt and it failed, we'll still continue
            if [ $attempt -eq 5 ]; then
              echo "Warning: All deployment attempts failed, but continuing..."
            fi
          done
          
          # Verify deployment
          echo "Checking application deployment status:"
          /opt/vespa/bin/vespa-deploy status || true
        volumeMounts:
        - name: app-config-volume
          mountPath: /app-config
        - name: app-directory
          mountPath: /app
      volumes:
      - name: app-config-volume
        configMap:
          name: marqo-app-config
      - name: app-directory
        emptyDir: {}