{{- if .Values.opentelemetry.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
  namespace: {{ include "marqo.namespace" $ }}
data:
  collector.yaml: |
    receivers:
      prometheus:
        config:
          scrape_configs:
          # Dynamic Vespa pod discovery using pod role
          - job_name: 'vespa-pods'
            scrape_interval: 30s
            kubernetes_sd_configs:
              - role: pod
                namespaces:
                  names:
                    - {{ include "marqo.namespace" $ }}
            relabel_configs:
              # Keep only Vespa pods by matching app label prefixes
              - source_labels: [__meta_kubernetes_pod_label_app]
                regex: 'vespa.*'
                action: keep
              # Extract component type from pod name
              - source_labels: [__meta_kubernetes_pod_name]
                regex: '(vespa-[^-]+)-.*'
                target_label: component
              # Set the pod name as a label
              - source_labels: [__meta_kubernetes_pod_name]
                target_label: pod
              # Extract the namespace
              - source_labels: [__meta_kubernetes_namespace]
                target_label: namespace
              # Set correct port for metrics
              - source_labels: [__address__]
                target_label: __address__
                regex: '([^:]+)(?::\\d+)?'
                replacement: '$$1:19092'  # Escaped $ with double $$ to prevent variable substitution
            metrics_path: '/prometheus/v1/values'
            
          # Backup static config to ensure critical components are always monitored
          - job_name: 'vespa-static'
            scrape_interval: 30s
            static_configs:
              - targets:
                - 'vespa-admin-server-0.vespa-admin.{{ include "marqo.namespace" $ }}.svc.cluster.local:19092'
                - 'vespa-configserver-0.vespa-internal.{{ include "marqo.namespace" $ }}.svc.cluster.local:19092'
                {{- range $i := until (int $.Values.vespaContentServer.replicas) }}
                - 'vespa-content-server-{{ $i }}.vespa-content.{{ include "marqo.namespace" $ }}.svc.cluster.local:19092'
                {{- end }}
            metrics_path: '/prometheus/v1/values'
            relabel_configs:
              - target_label: origin
                replacement: 'static-fallback'
              - target_label: namespace
                replacement: '{{ include "marqo.namespace" $ }}'
    
    processors:
      batch:
        timeout: 10s
        send_batch_size: 1000
        send_batch_max_size: 10000
    
    exporters:
      otlp:
        endpoint: {{ $.Values.opentelemetry.exporter.endpoint | quote }}
        tls:
          insecure: {{ $.Values.opentelemetry.exporter.tls.insecure }}
    
    service:
      pipelines:
        metrics:
          receivers: [prometheus]
          processors: [batch]
          exporters: [otlp]
---
{{- if .Values.opentelemetry.clusterRole.create }}
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otel-collector-{{ include "marqo.namespace" $ }}
rules:
  - apiGroups: [""]
    resources: ["pods", "namespaces", "services"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["replicasets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions"]
    resources: ["replicasets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["nodes", "endpoints"]
    verbs: ["list", "watch", "get"]
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["list", "watch"]
  - apiGroups: [""]
    resources: ["nodes/proxy"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["nodes/stats", "configmaps", "events"]
    verbs: ["create", "get"]
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["otel-container-insight-clusterleader"]
    verbs: ["get", "update"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: otel-collector
  namespace: {{ include "marqo.namespace" $ }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: otel-collector-{{ include "marqo.namespace" $ }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: otel-collector-{{ include "marqo.namespace" $ }}
subjects:
  - kind: ServiceAccount
    name: otel-collector
    namespace: {{ include "marqo.namespace" $ }}
{{- end }}
---
apiVersion: {{ if eq $.Values.opentelemetry.mode "daemonset" }}apps/v1{{ else }}apps/v1{{ end }}
kind: {{ $.Values.opentelemetry.mode | title }}
metadata:
  name: otel-collector
  namespace: {{ include "marqo.namespace" $ }}
spec:
  {{- if ne $.Values.opentelemetry.mode "daemonset" }}
  replicas: 1
  {{- end }}
  selector:
    matchLabels:
      app: otel-collector
  template:
    metadata:
      labels:
        app: otel-collector
    spec:
      serviceAccountName: otel-collector
      containers:
      - name: otel-collector
        image: {{ $.Values.opentelemetry.image.repository }}:{{ $.Values.opentelemetry.image.tag }}
        args:
        - --config=/conf/collector.yaml
        resources:
          limits:
            cpu: {{ $.Values.opentelemetry.resources.limits.cpu }}
            memory: {{ $.Values.opentelemetry.resources.limits.memory }}
          requests:
            cpu: {{ $.Values.opentelemetry.resources.requests.cpu }}
            memory: {{ $.Values.opentelemetry.resources.requests.memory }}
        volumeMounts:
        - name: config
          mountPath: /conf
      volumes:
      - name: config
        configMap:
          name: otel-collector-config
{{- end }}