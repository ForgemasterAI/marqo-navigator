image:
  repository: otel/opentelemetry-collector-contrib
  tag: "0.103.0"  # Use appropriate version
  
mode: deployment

# Add resource limits and requests
resources:
  limits:
    cpu: 1
    memory: 2Gi
  requests:
    cpu: 200m
    memory: 400Mi

clusterRole:
  create: true
  rules:
    # k8sattributes processor requires these permissions
    - apiGroups: [""]
      resources: ["pods", "namespaces", "services"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["apps"]
      resources: ["replicasets"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["extensions"]
      resources: ["replicasets"]
      verbs: ["get", "list", "watch"]
    - apiGroups: [""]
      resources: ["nodes", "endpoints"]
      verbs: ["list", "watch", "get"]
    - apiGroups: ["batch"]
      resources: ["jobs"]
      verbs: ["list", "watch"]
    - apiGroups: [""]
      resources: ["nodes/proxy"]
      verbs: ["get"]
    - apiGroups: [""]
      resources: ["nodes/stats", "configmaps", "events"]
      verbs: ["create", "get"]
    - apiGroups: [""]
      resources: ["configmaps"]
      resourceNames: ["otel-container-insight-clusterleader"]
      verbs: ["get", "update"]

config:
  receivers:
    prometheus:
      config:
        scrape_configs:
        # Dynamic Vespa pod discovery using pod role
        - job_name: 'vespa-pods'
          scrape_interval: 30s
          kubernetes_sd_configs:
            - role: pod
              namespaces:
                names:
                  - marqo-ai
          relabel_configs:
            # Keep only Vespa pods by matching app label prefixes
            - source_labels: [__meta_kubernetes_pod_label_app]
              regex: 'vespa.*'
              action: keep
            # Extract component type from pod name
            - source_labels: [__meta_kubernetes_pod_name]
              regex: '(vespa-[^-]+)-.*'
              target_label: component
            # Set the pod name as a label
            - source_labels: [__meta_kubernetes_pod_name]
              target_label: pod
            # Extract the namespace
            - source_labels: [__meta_kubernetes_namespace]
              target_label: namespace
            # Set correct port for metrics
            - source_labels: [__address__]
              target_label: __address__
              regex: '([^:]+)(?::\\d+)?'
              replacement: '$$1:19092'  # Escaped $ with double $$ to prevent variable substitution
          metrics_path: '/prometheus/v1/values'
          
        # Backup static config to ensure critical components are always monitored
        - job_name: 'vespa-static'
          scrape_interval: 30s
          static_configs:
            - targets:
              - 'vespa-admin-server-0.vespa-admin.marqo-ai.svc.cluster.local:19092'
              - 'vespa-configserver-0.vespa-internal.marqo-ai.svc.cluster.local:19092'
              - 'vespa-content-server-0.vespa-content.marqo-ai.svc.cluster.local:19092'
          metrics_path: '/prometheus/v1/values'
          relabel_configs:
            - target_label: origin
              replacement: 'static-fallback'
  
  service:
    pipelines:
      metrics:
        receivers: [prometheus]
        processors: [batch]
        exporters: [otlp]
  
  exporters:
    otlp:
      endpoint: signoz-otel-collector.monitoring.svc.cluster.local:4317
      tls:
        insecure: true